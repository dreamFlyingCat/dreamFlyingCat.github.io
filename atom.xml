<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dreamFlyingCat</title>
  <icon>https://www.gravatar.com/avatar/23d136dc82cfca661ae65f0f6a7d1289</icon>
  <subtitle>书山有路勤为径，学海无涯苦作舟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreamflyingcat.github.io/"/>
  <updated>2018-04-09T03:58:16.553Z</updated>
  <id>https://dreamflyingcat.github.io/</id>
  
  <author>
    <name>MissLiu</name>
    <email>1293925288@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中文转拼音或首字母模块</title>
    <link href="https://dreamflyingcat.github.io/2018/04/09/heheda/"/>
    <id>https://dreamflyingcat.github.io/2018/04/09/heheda/</id>
    <published>2018-04-09T02:49:34.957Z</published>
    <updated>2018-04-09T03:58:16.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongoose v5.0.12 中文API - 新手入门</title>
    <link href="https://dreamflyingcat.github.io/2018/04/08/mongoose%20v5.0.12%20%E4%B8%AD%E6%96%87API/"/>
    <id>https://dreamflyingcat.github.io/2018/04/08/mongoose v5.0.12 中文API/</id>
    <published>2018-04-08T02:44:02.025Z</published>
    <updated>2018-04-09T03:52:51.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新手入门"><a href="#新手入门" class="headerlink" title="新手入门"></a>新手入门</h2><p>首先请确定你已经安装了<a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">mongoDB</a>和<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>。<br>接下来使用<code>npm</code>安装mongoose。</p><pre><code>$ npm install mongoose</code></pre><p>假设我们喜欢毛绒绒的猫咪，想要在mongoDB中记录我们遇见过的每一只猫咪。首先我们要在项目中引入mongoose并且连接到运行在本地MongoDB实例上的<code>test</code>数据库。</p><pre><code>// getting-started.jsvar mongoose = require(&apos;mongoose&apos;);mongoose.connect(&apos;mongodb://localhost/test&apos;);       </code></pre><p>我们需要知道连接到运行在本地的数据库的结果是成功还是失败：</p><pre><code>var db = mongoose.connection;db.on(&apos;error&apos;, console.error.bind(console, &apos;connection error:&apos;));db.once(&apos;open&apos;, function() {// we&apos;re connected!});</code></pre><p>一旦我们发起连接，回调函数会被调用。简洁起见，我们假定下面的代码都写在回调函数中。</p><p>在Mongoose中，所有事物都源于模式。参考下面的代码定义kittens。</p><pre><code>var kittySchema = mongoose.Schema({name: String});</code></pre><p>目前为止，我们创建了一个schema，它只有一个属性——字符串类型的<code>name</code>。下一步要将schema编译为一个<a href="http://mongoosejs.com/docs/models.html" target="_blank" rel="noopener">Model</a>。</p><pre><code>var Kitten = mongoose.model(&apos;Kitten&apos;, kittySchema);</code></pre><p>model是一个class用于构造documents。在这种情况下，每个document都是Kitten的实例，都拥有在schema中声明的属性和行为。让我们创建一个document来代表在路边遇到的一只猫咪。</p><pre><code>var silence = new Kitten({ name: &apos;Silence&apos; });console.log(silence.name); // &apos;Silence&apos;</code></pre><p>猫咪可以喵喵叫，我们学习如何给document添加”speak”功能：</p><pre><code>// NOTE: methods must be added to the schema before compiling it with mongoose.model()kittySchema.methods.speak = function () {    var greeting = this.name        ? &quot;Meow name is &quot; + this.name        : &quot;I don&apos;t have a name&quot;;    console.log(greeting);}var Kitten = mongoose.model(&apos;Kitten&apos;, kittySchema);</code></pre><p>将方法函数添加到schema实例的<code>methods</code>属性上，方法会被编译到<code>Model</code>的原型上从而让每个实例document都可以访问该方法。</p><pre><code>var fluffy = new Kitten({ name: &apos;fluffy&apos; });fluffy.speak(); // &quot;Meow name is fluffy&quot;</code></pre><p>这样猫咪就可以说话啦！到现在我们还没有向mongoDB中保存任何的数据，调用document的<code>save</code>方法保存文档。如果报错，错误对象会包含在回调函数的第一个参数中。</p><pre><code>fluffy.save(function (err, fluffy) {    if (err) return console.error(err);    fluffy.speak();});</code></pre><p>我们可以通过操作Kitten <a href="http://mongoosejs.com/docs/models.html" target="_blank" rel="noopener">Model</a>查看曾经遇到过的所有猫咪的文档。</p><pre><code>Kitten.find(function (err, kittens) {    if (err) return console.error(err);    console.log(kittens);})</code></pre><p>我们将mongoDB中所有的猫咪文档全部打印出来了，我们也可以通过名字过滤猫咪，mongoose支持<a href="https://www.mongodb.com/download-center" target="_blank" rel="noopener">mongoDB</a>丰富的查询语法。</p><pre><code>Kitten.find({ name: /^fluff/ }, callback);</code></pre><p>上例中会查询所有名字以’fluff’开头的猫咪，并将结果放在数组中返回给回调函数。</p><h3 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations"></a>Congratulations</h3><p>快速入门到此结束。现在我们成功的创建了一个schema并添加了一个自定义的实例方法，使用Mongoose在MongoDB中保存并查询了kittens的文档。进阶学习前往查看<a href="https://github.com/dreamFlyingCat/mongoose-API/blob/master/docs/Schemas/Schema.md" target="_blank" rel="noopener">guide</a>或者<a href="http://mongoosejs.com/docs/api.html" target="_blank" rel="noopener">API文档</a>。</p><h3 id="下一章-——-mongoose指南"><a href="#下一章-——-mongoose指南" class="headerlink" title="下一章 —— mongoose指南"></a>下一章 —— <a href="https://github.com/dreamFlyingCat/mongoose-API/blob/master/docs/Schemas/Schema.md" target="_blank" rel="noopener">mongoose指南</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新手入门&quot;&gt;&lt;a href=&quot;#新手入门&quot; class=&quot;headerlink&quot; title=&quot;新手入门&quot;&gt;&lt;/a&gt;新手入门&lt;/h2&gt;&lt;p&gt;首先请确定你已经安装了&lt;a href=&quot;https://www.mongodb.com/download-center&quot; t
      
    
    </summary>
    
    
  </entry>
  
</feed>
